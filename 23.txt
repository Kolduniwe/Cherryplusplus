#include <iostream>
#include <string>
#include <sstream>
#include <cstdlib> // для abs()
using namespace std;

class Fraction {
public:
    Fraction(int numerator, int denominator);
    string toString();
    double toDouble();

    Fraction plus(Fraction that);
    Fraction minus(Fraction that);
    Fraction times(Fraction that);
    Fraction by(Fraction that);

private:
    int numerator;
    int denominator;

    void reduce();
    int gcd(int a, int b); // Найбільший спільний дільник
};

Fraction::Fraction(int num, int den) {
    if (den < 0) {
        num = -num;
        den = -den;
    }
    numerator = num;
    denominator = den;
    reduce(); // Автоматично скорочуємо
}

int Fraction::gcd(int a, int b) {
    // Алгоритм Евкліда
    while (b != 0) {
        int t = b;
        b = a % b;
        a = t;
    }
    return a;
}

void Fraction::reduce() {
    int divisor = gcd(abs(numerator), denominator);
    numerator /= divisor;
    denominator /= divisor;
}

string Fraction::toString() {
    int absNum = abs(numerator);
    int whole = absNum / denominator;
    int remainder = absNum % denominator;

    string result;

    if (numerator < 0) result += "-";

    if (whole != 0 && remainder != 0)
        result += to_string(whole) + " " + to_string(remainder) + "/" + to_string(denominator);
    else if (whole != 0 && remainder == 0)
        result += to_string(whole);
    else if (whole == 0 && remainder != 0)
        result += to_string(remainder) + "/" + to_string(denominator);
    else
        result += "0";

    return result;
}

double Fraction::toDouble() {
    return static_cast<double>(numerator) / denominator;
}

Fraction Fraction::plus(Fraction that) {
    int num = numerator * that.denominator + that.numerator * denominator;
    int den = denominator * that.denominator;
    return Fraction(num, den);
}

Fraction Fraction::minus(Fraction that) {
    int num = numerator * that.denominator - that.numerator * denominator;
    int den = denominator * that.denominator;
    return Fraction(num, den);
}

Fraction Fraction::times(Fraction that) {
    int num = numerator * that.numerator;
    int den = denominator * that.denominator;
    return Fraction(num, den);
}

Fraction Fraction::by(Fraction that) {
    int num = numerator * that.denominator;
    int den = denominator * that.numerator;
    // перевірка на ділення на 0 не обов’язкова (в завданні вхідні дані коректні)
    return Fraction(num, den);
}

int main() {
    string input1, input2;
    int num1, den1, num2, den2;
    char slash;

    cout << "Enter first fraction (e.g. 3 / 4): ";
    getline(cin, input1);
    stringstream ss1(input1);
    ss1 >> num1 >> slash >> den1;

    cout << "Enter second fraction (e.g. 1 / 3): ";
    getline(cin, input2);
    stringstream ss2(input2);
    ss2 >> num2 >> slash >> den2;

    Fraction f1(num1, den1);
    Fraction f2(num2, den2);

    cout << f1.toString() << " + " << f2.toString() << " = " << f1.plus(f2).toString() << endl;
    cout << f1.toString() << " - " << f2.toString() << " = " << f1.minus(f2).toString() << endl;
    cout << f1.toString() << " * " << f2.toString() << " = " << f1.times(f2).toString() << endl;
    cout << f1.toString() << " / " << f2.toString() << " = " << f1.by(f2).toString() << endl;

    return 0;
}
